// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "shared.proto" (package "shared", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message shared.ErrorResponse
 */
export interface ErrorResponse {
  /**
   * @generated from protobuf field: string error_message = 1;
   */
  errorMessage: string;
  /**
   * @generated from protobuf field: int32 error_code = 2;
   */
  errorCode: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ErrorResponse$Type extends MessageType<ErrorResponse> {
  constructor() {
    super('shared.ErrorResponse', [
      { no: 1, name: 'error_message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'error_code', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
    ]);
  }
  create(value?: PartialMessage<ErrorResponse>): ErrorResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.errorMessage = '';
    message.errorCode = 0;
    if (value !== undefined) reflectionMergePartial<ErrorResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ErrorResponse
  ): ErrorResponse {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string error_message */ 1: {
          message.errorMessage = reader.string();
          break;
        }
        case /* int32 error_code */ 2: {
          message.errorCode = reader.int32();
          break;
        }
        default: {
          const u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
        }
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ErrorResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string error_message = 1; */
    if (message.errorMessage !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
    /* int32 error_code = 2; */
    if (message.errorCode !== 0) writer.tag(2, WireType.Varint).int32(message.errorCode);
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message shared.ErrorResponse
 */
export const ErrorResponse = new ErrorResponse$Type();
